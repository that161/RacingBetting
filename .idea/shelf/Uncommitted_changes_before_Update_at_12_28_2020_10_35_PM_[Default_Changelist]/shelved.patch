Index: SourceCode/mainGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\nimport pygame\r\n\r\n\r\npygame.init()\r\npygame.mixer.init()\r\npygame.mixer.set_num_channels(10)\r\n\r\n# creat the screen\r\nscreen = pygame.display.set_mode((1280, 720))\r\n\r\n#Title and Icon\r\npygame.display.set_caption(\"Car Racing\")\r\nicon = pygame.image.load(\"../image/racing.png\")\r\npygame.display.set_icon(icon)\r\n\r\n\r\n\r\n# Common Variables\r\nSpriteDelay = 10\r\n\r\n#Start and Finish\r\nStartImg = pygame.image.load(\"../image/2.png\")\r\nStartX = 0\r\nStartY = 100\r\nFinishImg = pygame.image.load(\"../image/4.png\")\r\nFinishX = 1205\r\nFinishY = 100\r\n\r\n#You Win\r\nWinImg = pygame.image.load(\"../image/YouWin.png\")\r\nRankingImg = pygame.image.load(\"../image/panel.jpg\")\r\nWinX = 450\r\nWinY = 230\r\nPanelX = 300\r\nPanelY = 100\r\nRacingLen = 1200\r\n\r\n#Road\r\nRoadImg = pygame.image.load(\"../image/3.png\")\r\nRoadX = 20\r\nRoadY = 100\r\nRoadX_change = 100\r\nnum_of_road = 15\r\n\r\n#Buff\r\nBuffSpeedImg = pygame.image.load(\"../image/buff.png\")\r\nBuffSpeedX = random.randrange(350, RacingLen, 100)\r\nBuffSpeedY = 105\r\nBuffSpeedY_change = 85\r\nnumber_of_buffspeed = 6\r\n\r\n# Game Classes\r\n\r\nclass MyCar():\r\n    def __init__(self, No, image):\r\n        self.No = No\r\n        self.image = image\r\n        self.x = 10\r\n        self.y = 100 + No*85\r\n        self.buffX = 0\r\n        self.buffCount = 0\r\n        self.buff = None\r\n        self.isGoBack = False\r\n        self.isStun = False\r\n        self.isFinish = False\r\n        self.timer = 0\r\n        self.rank = 0\r\n\r\n        self.xChange = random.randrange(10, 15, 1) / 10\r\n\r\n    def Update(self):\r\n        # update timer for go back\r\n        global currentRank\r\n        if self.isGoBack:\r\n            self.timer -= 1\r\n        if self.timer <= 0 and self.isGoBack:\r\n            self.isGoBack = False\r\n            self.xChange *= -1\r\n\r\n        if self.isStun:\r\n            self.timer -= 1\r\n        if self.timer <= 0 and self.isStun:\r\n            self.isStun = False\r\n            self.xChange = random.randrange(10, 15, 1) / 10\r\n\r\n        if not self.isGoBack and not self.isStun:\r\n            self.x += self.xChange\r\n\r\n        elif self.x > 10:\r\n            self.x += self.xChange\r\n\r\n        if self.x <= 0:\r\n            self.x = 10\r\n        if self.x >= RacingLen:\r\n            self.x = RacingLen\r\n            if self.rank == 0:\r\n                self.rank = currentRank\r\n                if currentRank == 1:\r\n                    pygame.mixer.Channel(1).play(pygame.mixer.Sound('../soundFX/winner.mp3'))\r\n                currentRank += 1\r\n\r\n\r\n        if self.buffX > 0 and self.x >= self.buffX:\r\n            if self.buff.type == 0:\r\n                pygame.mixer.Channel(4 + self.No).play(pygame.mixer.Sound('../soundFX/speed-up.mp3'))\r\n            elif self.buff.type == 1:\r\n                pygame.mixer.Channel(4 + self.No).play(pygame.mixer.Sound('../soundFX/speed-down.mp3'))\r\n            elif self.buff.type == 2:\r\n                self.x = 10\r\n                pygame.mixer.Channel(4 + self.No).play(pygame.mixer.Sound('../soundFX/quaylai.mp3'))\r\n            elif self.buff.type == 3:\r\n                self.xChange *= -1\r\n                self.isGoBack = True\r\n                self.timer = 50\r\n                pygame.mixer.Channel(4 + self.No).play(pygame.mixer.Sound('../soundFX/quayxe.mp3'))\r\n            elif self.buff.type == 4:\r\n                self.xChange = 0\r\n                self.isStun = True\r\n                self.timer = 50\r\n                pygame.mixer.Channel(4 + self.No).play(pygame.mixer.Sound('../soundFX/broken.mp3'))\r\n            elif self.buff.type == 5:\r\n                self.x = RacingLen\r\n                pygame.mixer.Channel(4 + self.No).play(pygame.mixer.Sound('../soundFX/tele.mp3'))\r\n            else:\r\n                self.xChange += self.buff.xChange\r\n\r\n            self.buffX = 0\r\n            self.buff = None\r\n\r\n    def Draw(self, screen):\r\n        if self.isGoBack:\r\n            flipImage = pygame.transform.flip(self.image, True, False)\r\n            screen.blit(flipImage, (self.x, self.y))\r\n        else:\r\n            screen.blit(self.image, (self.x, self.y))\r\n        if self.x >= 200 and self.x < RacingLen and self.buffX == 0 and self.buffCount < 2:\r\n            # random in range position X of Car + 100 => Car X + 500\r\n            maxRange = int(self.x) + 500\r\n            if maxRange > 1000:\r\n                maxRange = 1000\r\n\r\n            self.buffX = random.randrange(int(self.x) + 100, maxRange, 100)\r\n            type = random.randint(0,5)\r\n            self.buff = MyBuff(type, self.buffX, BuffSpeedY + self.No * BuffSpeedY_change)\r\n            self.buffCount += 1\r\n\r\n        if self.buffX > 0 and self.buff:\r\n            self.buff.Draw(screen)\r\n\r\nclass MyBuff():\r\n    def __init__(self, type, x, y):\r\n        self.x = x\r\n        self.y = y\r\n        self.type = type\r\n        self.xChange = 0\r\n        if type == 0:\r\n            self.image = pygame.image.load(\"../image/buff.png\")\r\n            self.xChange = 1\r\n        elif type == 1:\r\n            self.image = pygame.image.load(\"../image/exhaust.png\")\r\n            self.xChange = -0.5\r\n        elif type == 2:\r\n            self.image = pygame.image.load(\"../image/ve.png\")\r\n        elif type == 3:\r\n            self.image = pygame.image.load(\"../image/turn.png\")\r\n        elif type == 4:\r\n            StunImg = pygame.image.load(\"../image/stun.png\")\r\n            self.image = pygame.transform.scale(StunImg, (50, 50))\r\n        elif type == 5:\r\n            FinishLineImg = pygame.image.load(\"../image/bùa về đích.png\")\r\n            self.image = pygame.transform.scale(FinishLineImg, (60, 60))\r\n        else:\r\n            self.image = pygame.image.load(\"../image/buff.png\")\r\n            self.xChange = 1\r\n\r\n    def Draw(self, screen):\r\n        screen.blit(self.image, (self.x, self.y))\r\n\r\nclass Cheer():\r\n    def __init__(self, name, imgNum, x, y):\r\n        self.images = []\r\n        self.imageIndex = 0\r\n        self.x = x\r\n        self.y = y\r\n        self.delay = SpriteDelay\r\n        for i in range(imgNum):\r\n            self.images.append(pygame.image.load(\"../image/{0}{1}.png\".format(name, i)))\r\n\r\n    def Draw(self, screen):\r\n        screen.blit(self.images[self.imageIndex], (self.x, self.y))\r\n        # delay for draw image\r\n        self.delay -= 1\r\n        if self.delay == 0:\r\n            self.imageIndex += 1\r\n            self.delay = SpriteDelay\r\n            if self.imageIndex == len(self.images):\r\n                self.imageIndex = 0\r\n\r\ndef DrawStart():\r\n    screen.blit(StartImg, (StartX, StartY))\r\n\r\ndef DrawFinish():\r\n    screen.blit(FinishImg, (FinishX, FinishY))\r\n\r\n# draw ranking panel\r\nwinDelay = 200\r\ndef Win():\r\n    global winDelay\r\n    if winDelay > 0:\r\n        screen.blit(WinImg, (WinX, WinY))\r\n        winDelay -= 1\r\n\r\ndef ShowRanking(Cars):\r\n    # Stop background song\r\n    pygame.mixer.Channel(0).stop()\r\n    # Play clap sound\r\n    global playedClap\r\n    if not playedClap:\r\n        pygame.mixer.Channel(3).play(pygame.mixer.Sound('../soundFX/clap.mp3'))\r\n        playedClap = True\r\n\r\n    # Draw panel\r\n    rankingImg = pygame.transform.scale(RankingImg, (700, 500))\r\n    screen.blit(rankingImg, (PanelX, PanelY))\r\n\r\n    # init font\r\n    pygame.font.init()\r\n    myfont = pygame.font.SysFont('Comic Sans MS', 30)\r\n\r\n    for i in range(len(Cars)):\r\n        rankText = myfont.render('Rank {0}:'.format(i+1), False, (255,0,0))\r\n        screen.blit(rankText, (PanelX + 150, PanelY+180+i*50))\r\n        carsImg = pygame.transform.scale(Cars[i].image, (50, 50))\r\n        screen.blit(carsImg, (PanelX + 500, PanelY+170+i*50))\r\n\r\ndef Road(RoadX, RoadY):\r\n    i = 0\r\n    for i in range(num_of_road):\r\n        screen.blit(RoadImg, (RoadX, RoadY))\r\n        RoadX += RoadX_change\r\n\r\ndef SortRanking(car):\r\n    return car.rank\r\n\r\ndef DrawTrees(screen):\r\n    Trees = []\r\n    for i in range(6):\r\n        Trees.append(pygame.image.load('../image/tree{0}.png'.format(i%2)))\r\n\r\n    for i in range(6):\r\n        screen.blit(Trees[i], (450+i*60, 20))\r\n\r\n    for i in range(6):\r\n        screen.blit(Trees[i], (450+i*60, 600))\r\n\r\ndef InitCheers(x, y):\r\n    for i in range(6):\r\n        if i % 2 == 0:\r\n            Cheers.append(Cheer(\"cheer\", 2, x + i * 60, y))\r\n        else:\r\n            Cheers.append(Cheer(\"cheerblue\", 2, x + i * 60, y))\r\n\r\ndef DrawCheers(screen):\r\n    for i in range(len(Cheers)):\r\n        Cheers[i].Draw(screen)\r\n\r\ndef quitGame():\r\n    # stop music\r\n    pygame.mixer.Channel(0).stop()\r\n\r\n    # clear cars\r\n    Cars.clear()\r\n\r\ndef initGame(setName):\r\n    global currentRank\r\n    global playedClap\r\n\r\n    currentRank = 1\r\n    playedClap = False\r\n\r\n    for i in range(6):\r\n        image = pygame.image.load(\"../image/set{0}/car{1}.png\".format(setName,i+1))\r\n        car = MyCar(i, image)\r\n        Cars.append(car)\r\n\r\n    InitCheers(50, 20)\r\n    InitCheers(850, 20)\r\n    InitCheers(50, 600)\r\n    InitCheers(850, 600)\r\n\r\n    # Play background song\r\n    pygame.mixer.Channel(0).play(pygame.mixer.Sound('../soundFX/race3.mp3'), -1)\r\n\r\n# Global Game Variables\r\nCars = []\r\nCheers = []\r\n# will increase when a car finish\r\ncurrentRank = 1\r\nplayedClap = False\r\n\r\n#Game Loop\r\ndef runGame(setName):\r\n    running = True\r\n    initGame(setName)\r\n\r\n    while running:\r\n        # RGB\r\n        screen.fill((0, 0, 0))\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                quitGame()\r\n                running = False\r\n\r\n        i = 0\r\n        for i in range(num_of_road):\r\n            Road(RoadX, RoadY)\r\n\r\n        # Cheers\r\n        DrawCheers(screen)\r\n        DrawTrees(screen)\r\n\r\n        DrawStart()\r\n        DrawFinish()\r\n        for i in range(len(Cars)):\r\n            Cars[i].Update()\r\n            Cars[i].Draw(screen)\r\n\r\n        # # Draw win panel\r\n        if currentRank > 1:\r\n            Win()\r\n\r\n        # Draw Ranking\r\n        if currentRank > len(Cars):\r\n            # sort rank for car list\r\n            Cars.sort(key=SortRanking)\r\n            ShowRanking(Cars)\r\n\r\n        pygame.display.update()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SourceCode/mainGame.py b/SourceCode/mainGame.py
--- a/SourceCode/mainGame.py	(revision 79a373142e382df095cb002a7869193ca06efaa7)
+++ b/SourceCode/mainGame.py	(date 1609086253810)
@@ -37,6 +37,13 @@
 PanelY = 100
 RacingLen = 1200
 
+#You Lose
+LoseImg = pygame.image.load("../image/YouLose.png")
+LoseX = 450
+LoseY = 130
+
+
+
 #Road
 RoadImg = pygame.image.load("../image/3.png")
 RoadX = 20
@@ -73,6 +80,7 @@
     def Update(self):
         # update timer for go back
         global currentRank
+        global selectedCar
         if self.isGoBack:
             self.timer -= 1
         if self.timer <= 0 and self.isGoBack:
@@ -97,8 +105,9 @@
             self.x = RacingLen
             if self.rank == 0:
                 self.rank = currentRank
-                if currentRank == 1:
+                if currentRank == 1 and selectedCar == self.No:
                     pygame.mixer.Channel(1).play(pygame.mixer.Sound('../soundFX/winner.mp3'))
+
                 currentRank += 1
 
 
@@ -212,6 +221,13 @@
         screen.blit(WinImg, (WinX, WinY))
         winDelay -= 1
 
+loseDelay = 200
+def Lose():
+    global loseDelay
+    if loseDelay > 0:
+        screen.blit(LoseImg, (LoseX, LoseY))
+        loseDelay -= 1
+
 def ShowRanking(Cars):
     # Stop background song
     pygame.mixer.Channel(0).stop()
@@ -299,11 +315,14 @@
 # will increase when a car finish
 currentRank = 1
 playedClap = False
+selectedCar = -1
 
 #Game Loop
-def runGame(setName):
+def runGame(carNumber ,setName):
+    global selectedCar
     running = True
     initGame(setName)
+    selectedCar = carNumber
 
     while running:
         # RGB
@@ -330,7 +349,16 @@
 
         # # Draw win panel
         if currentRank > 1:
-            Win()
+            # Find winner car
+            winner = -1
+            for i in range(len(Cars)):
+                if Cars[i].rank == 1:
+                    winner = Cars[i]
+                    break
+            if winner != -1 and winner.No == selectedCar:
+                Win()
+            else:
+                Lose()
 
         # Draw Ranking
         if currentRank > len(Cars):
Index: SourceCode/mainMenu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame, sys\r\nfrom pygame.locals import *\r\nimport time\r\nimport tkinter\r\nfrom tkinter import *\r\n\r\nfrom mainGame import runGame\r\n\r\n'''anything go with rect use the form (left, top, width, height)'''\r\n\r\npygame.init()\r\n#from this is the define for game statistics\r\nFPS = 60\r\nfpsClock = pygame.time.Clock()\r\n\r\nWINDOWSIZE = (1280,720) #window size\r\n\r\npygame.display.set_caption('Racing bet 888') #set Caption for title bar\r\n\r\nMAINMENUSCREEN = pygame.image.load('..\\image\\mainmenu.png')\r\nMAINMENUSCREEN = pygame.transform.scale(MAINMENUSCREEN, WINDOWSIZE) #create background image\r\n\r\nmenuSound = pygame.mixer.Sound('..\\soundFX\\menu.wav') #open sound\r\n\r\nDISPLAYSURFACE = pygame.display.set_mode(WINDOWSIZE) #create surface for mainmenu\r\ngMoney = 0\r\ncharacterSet = None\r\n\r\n#define font using \r\nfont = pygame.font.SysFont(None, 20, bold=True, italic=False) #set font for drawing\r\nmediumfont = pygame.font.SysFont(None, 30, bold = True, italic = False)\r\nbigfont = pygame.font.SysFont(None, 40, bold = True, italic = False)\r\n\r\n#end define the game statistics\r\n#------------------------------------------------------------------------------------------------#\r\n\r\n#drawing text on screen\r\ndef draw_text(text, font, color, surface, x, y): \r\n    textobj = font.render(text, 1, color)\r\n    textrect = textobj.get_rect()\r\n    textrect.topleft = (x,y)\r\n    surface.blit(textobj, textrect)\r\n    return 1\r\n\r\n#running main menu\r\ndef mainMenu(money, characterSet):\r\n    Running = True\r\n    clicked = False\r\n    toggleMenuSub = False\r\n    global IsPlaying\r\n\r\n    while Running:\r\n        #menuSound.play(-1) #repeat sound\r\n        DISPLAYSURFACE.blit(MAINMENUSCREEN, (0,0)) #draw background\r\n        draw_text(str(money), mediumfont, (255,0,0), DISPLAYSURFACE, 700, 630)\r\n        draw_text('YOUR CURRENT SET IS: ' + str(characterSet), font, (0,0,0), DISPLAYSURFACE, 550, 200)\r\n        #define the Buttons\r\n        exitButton = pygame.Rect(40, 20, 100, 65)\r\n        helpButton = pygame.Rect(55, 580, 110, 100)\r\n        miniGameButton = pygame.Rect(200, 580, 110, 100)\r\n        changeSetButton = pygame.Rect(350, 580, 110, 100)\r\n        shopButton = pygame.Rect(885, 580, 90, 95)\r\n        gameButton = pygame.Rect(1050, 580, 210, 100)\r\n        playButton = pygame.Rect(1075, 470, 120, 40)\r\n        changeNameButton = pygame.Rect(1075, 515, 120, 40)\r\n\r\n        #GET MOUSE CLICK\r\n        dx, dy = pygame.mouse.get_pos() #get clicked\r\n\r\n        #if mouse click execute\r\n        if exitButton.collidepoint(dx, dy):\r\n            if clicked:\r\n                exitConfirmScreen()\r\n        if helpButton.collidepoint(dx, dy):\r\n            if clicked:\r\n                helpScreen()\r\n        if miniGameButton.collidepoint(dx, dy):\r\n            if clicked:\r\n                money = miniGameScreen(money)\r\n        if changeSetButton.collidepoint(dx, dy):\r\n            if clicked:\r\n                characterSet = changeSetScreen(characterSet)\r\n\r\n        if shopButton.collidepoint(dx, dy):\r\n            if clicked:\r\n                money = shopScreen(money)\r\n        if gameButton.collidepoint(dx, dy):\r\n            if clicked:\r\n                toggleMenuSub = not toggleMenuSub\r\n        if playButton.collidepoint(dx, dy):\r\n\r\n            if clicked and toggleMenuSub:\r\n                 draw_text('PRESSED', mediumfont, (0,0,0), DISPLAYSURFACE, 500, 500)\r\n                 runGame(1)\r\n        if changeNameButton.collidepoint(dx, dy):\r\n            if clicked and toggleMenuSub:\r\n                draw_text('PRESSED', mediumfont, (0,0,0), DISPLAYSURFACE, 500, 500)\r\n        clicked = False\r\n\r\n    #checking exit game or input mouse click\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    clicked = True\r\n    #if menusub is on then draw it                \r\n        if toggleMenuSub:\r\n            drawGameMenuSub()\r\n\r\n    #update screen every frame of loop\r\n        fpsClock.tick(FPS)\r\n        pygame.display.update() #update screen every execution\r\n    return Running #return the running status to main\r\n\r\ndef exitConfirmScreen():\r\n    running = True\r\n    clicked = False\r\n    while running:\r\n        DISPLAYSURFACE.fill((0,0,0))\r\n        draw_text('Confirm Exit?', bigfont, (255,255,255), DISPLAYSURFACE, 500, 200)\r\n        dx, dy = pygame.mouse.get_pos()\r\n\r\n        #define and draw yes/no buttons\r\n        yesButton = pygame.Rect(480, 300, 50, 50)\r\n        noButton = pygame.Rect(680, 300, 50, 50)\r\n        pygame.draw.rect(DISPLAYSURFACE, (255,255,255), yesButton)\r\n        draw_text('Yes', font, (0,0,0), DISPLAYSURFACE, 490, 320)\r\n        pygame.draw.rect(DISPLAYSURFACE, (255,255,255), noButton)\r\n        draw_text('No', font, (0,0,0), DISPLAYSURFACE, 695, 320)\r\n\r\n        if yesButton.collidepoint(dx,dy):\r\n            if clicked:\r\n                pygame.exit()\r\n                sys.exit()\r\n        elif noButton.collidepoint(dx,dy):\r\n            if clicked:\r\n                running = False\r\n\r\n        clicked = False\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    clicked = True\r\n            if event.type == KEYDOWN:\r\n                if event.key == K_ESCAPE:\r\n                    running = False\r\n        fpsClock.tick(FPS)\r\n        pygame.display.update()\r\n    return running\r\n\r\ndef drawHelp():\r\n    draw_text('HELP', bigfont, (255,255,255), DISPLAYSURFACE, 620, 20)\r\n    draw_text('Welcome to Racing Bet Game', mediumfont, (255,255,255), DISPLAYSURFACE, 500, 50)\r\n    draw_text('Nothing to see here at this time', font, (255,255,255), DISPLAYSURFACE, 550, 100)\r\n    draw_text('Press ESC Key to return Main Menu', font, (255,255,255), DISPLAYSURFACE, 530, 120)\r\n\r\ndef helpScreen():\r\n    running = True\r\n    while running:\r\n        DISPLAYSURFACE.fill((0,0,0))\r\n        drawHelp()\r\n        #check event\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == KEYDOWN:\r\n                if event.key == K_ESCAPE:\r\n                    running = False\r\n        fpsClock.tick(FPS)\r\n        pygame.display.update()\r\n\r\ndef miniGameScreen(money):\r\n    running = True\r\n    while running:\r\n        DISPLAYSURFACE.fill((0,0,0))\r\n        draw_text('Nothing to see at this time', bigfont, (255,255,255), DISPLAYSURFACE, 450, 300)\r\n        money = miniGameEvent(money)\r\n        draw_text('Money at this time is: ' + str(money), mediumfont, (255,255,255), DISPLAYSURFACE, 500, 400)\r\n        draw_text('Press ESC Key to return Main Menu', font, (255,255,255), DISPLAYSURFACE, 530, 120)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == KEYDOWN:\r\n                if event.key == K_ESCAPE:\r\n                    running = False\r\n        fpsClock.tick(FPS)\r\n        pygame.display.update()\r\n    return money\r\n\r\ndef miniGameEvent(money):\r\n    money += 10\r\n    return money\r\n\r\ndef changeSetScreen(selectedSet):\r\n    running = True\r\n    while running:\r\n        DISPLAYSURFACE.fill((0,0,0))\r\n        draw_text('CHOSE YOUR FAVORITE SET: ', bigfont, (255,255,255), DISPLAYSURFACE, 400, 50)\r\n        draw_text('YOUR CURRENT SET IS: ' + str(selectedSet), mediumfont, (255,255,255), DISPLAYSURFACE, 450, 100) \r\n        draw_text('Press 1 to 5 to choose set', mediumfont, (255,255,255), DISPLAYSURFACE, 480, 150)\r\n        draw_text('Press ESC Key to return Main Menu', mediumfont, (255,255,255), DISPLAYSURFACE, 415, 200)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == KEYDOWN:\r\n                if event.key == ord('1'):\r\n                    selectedSet = 1\r\n                if event.key == ord('2'):\r\n                    selectedSet = 2\r\n                if event.key == ord('3'):\r\n                    selectedSet = 3\r\n                if event.key == ord('4'):\r\n                    selectedSet = 4\r\n                if event.key == ord('5'):\r\n                    selectedSet = 5\r\n                if event.key == K_ESCAPE:\r\n                    running = False\r\n\r\n        fpsClock.tick(FPS)\r\n        pygame.display.update()\r\n    return selectedSet\r\n\r\ndef shopScreen(money):\r\n    running = True\r\n    while running:\r\n        DISPLAYSURFACE.fill((0,0,0))\r\n        draw_text('Nothing at this time', bigfont, (255,255,255), DISPLAYSURFACE, 470, 300)\r\n        draw_text('Money at this time is: ' + str(money), mediumfont, (255,255,255), DISPLAYSURFACE, 490, 350)\r\n        draw_text('Press ESC Key to return Main Menu', font, (255,255,255), DISPLAYSURFACE, 490, 200)\r\n        draw_text('Press 1 to 5 to buy', font, (255,255,255), DISPLAYSURFACE, 550, 400)\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == KEYDOWN:\r\n                if event.key == ord('1'):\r\n                    if money < 100:\r\n                        draw_text('YOU DON\\'T HAVE ENOUGHT MONEY', bigfont, (255,255,255), DISPLAYSURFACE, 400, 500)\r\n                    else:\r\n                        money -= 100\r\n                if event.key == ord('2'):\r\n                    if money < 200:\r\n                        draw_text('YOU DON\\'T HAVE ENOUGHT MONEY', bigfont, (255,255,255), DISPLAYSURFACE, 400, 500)\r\n                    else: \r\n                        money -= 200\r\n                if event.key == ord('3'):\r\n                    if money < 300:\r\n                        draw_text('YOU DON\\'T HAVE ENOUGHT MONEY', bigfont, (255,255,255), DISPLAYSURFACE, 400, 500)\r\n                    else:\r\n                        money -= 300\r\n                if event.key == ord('4'):\r\n                    if money < 400:\r\n                        draw_text('YOU DON\\'T HAVE ENOUGHT MONEY', bigfont, (255,255,255), DISPLAYSURFACE, 400, 500)\r\n                    else: \r\n                        money -= 400\r\n                if event.key == ord('5'):\r\n                    if money < 500:\r\n                        draw_text('YOU DON\\'T HAVE ENOUGHT MONEY', bigfont, (255,255,255), DISPLAYSURFACE, 400, 500)\r\n                    else: \r\n                        money -= 500                       \r\n                if event.key == K_ESCAPE:\r\n                    running = False\r\n        fpsClock.tick(FPS)\r\n        pygame.display.update()\r\n    return money\r\n\r\ndef drawGameMenuSub():\r\n    subMenuArea = pygame.Rect(1060, 460, 150, 100)\r\n    pygame.draw.rect(DISPLAYSURFACE, (255,255,255), subMenuArea)\r\n    playButton = pygame.Rect(1075, 470, 120, 40)\r\n    changeNameButton = pygame.Rect(1075, 515, 120, 40)\r\n    pygame.draw.rect(DISPLAYSURFACE, (0,0,0), playButton, 3)\r\n    pygame.draw.rect(DISPLAYSURFACE, (0,0,0), changeNameButton, 3)\r\n    draw_text('PLAY', font, (0,0,0), DISPLAYSURFACE, 1115, 485)\r\n    draw_text('CHANGE NAME', font, (0,0,0), DISPLAYSURFACE, 1080, 530)\r\n\r\ndef playScreen():\r\n    pass\r\n\r\ndef changeNameScreen():\r\n    pass\r\n\r\n# Global Variables\r\n\r\ndef main():\r\n    Running = True\r\n    while Running:\r\n        Running = mainMenu(gMoney, characterSet)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n#end of file
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SourceCode/mainMenu.py b/SourceCode/mainMenu.py
--- a/SourceCode/mainMenu.py	(revision 79a373142e382df095cb002a7869193ca06efaa7)
+++ b/SourceCode/mainMenu.py	(date 1609084874919)
@@ -91,7 +91,7 @@
 
             if clicked and toggleMenuSub:
                  draw_text('PRESSED', mediumfont, (0,0,0), DISPLAYSURFACE, 500, 500)
-                 runGame(1)
+                 runGame(3, 1)
         if changeNameButton.collidepoint(dx, dy):
             if clicked and toggleMenuSub:
                 draw_text('PRESSED', mediumfont, (0,0,0), DISPLAYSURFACE, 500, 500)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b5f0bc71-4799-4014-b424-7f26b12fe812\" name=\"Default Changelist\" comment=\"test commit\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/SourceCode/mainGame.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/SourceCode/mainGame.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/SourceCode/mainMenu.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/SourceCode/mainMenu.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--follow-tags\" />\r\n        <option name=\"title\" value=\"Current Branch\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1mEpxEDDsjtLqid0AwZER8KlyW9\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\Python\\RacingBet\\SourceCode\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\Python\\RacingBet\\soundFX\" />\r\n      <recent name=\"E:\\Python\\RacingBet\\image\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"mainMenu\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"RacingBet\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/SourceCode\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/SourceCode/mainMenu.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.mainMenu\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b5f0bc71-4799-4014-b424-7f26b12fe812\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1609068848652</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1609068848652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test commit\">\r\n      <created>1609078385725</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1609078385725</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"test commit\">\r\n      <created>1609078510445</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1609078510445</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/feature/game\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"test commit\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 79a373142e382df095cb002a7869193ca06efaa7)
+++ b/.idea/workspace.xml	(date 1609169513143)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="b5f0bc71-4799-4014-b424-7f26b12fe812" name="Default Changelist" comment="test commit">
+    <list default="true" id="b5f0bc71-4799-4014-b424-7f26b12fe812" name="Default Changelist" comment="fix bug">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/SourceCode/mainGame.py" beforeDir="false" afterPath="$PROJECT_DIR$/SourceCode/mainGame.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/SourceCode/mainMenu.py" beforeDir="false" afterPath="$PROJECT_DIR$/SourceCode/mainMenu.py" afterDir="false" />
@@ -90,7 +90,14 @@
       <option name="project" value="LOCAL" />
       <updated>1609078510445</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="fix bug">
+      <created>1609082115516</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1609082115516</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -124,6 +131,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="test commit" />
-    <option name="LAST_COMMIT_MESSAGE" value="test commit" />
+    <MESSAGE value="fix bug" />
+    <option name="LAST_COMMIT_MESSAGE" value="fix bug" />
   </component>
 </project>
\ No newline at end of file
